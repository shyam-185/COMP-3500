diff --git a/defs.mk b/defs.mk
new file mode 100644
index 0000000..5b736af
--- /dev/null
+++ b/defs.mk
@@ -0,0 +1,175 @@
+# This file was generated by configure. Edits will disappear if you rerun
+# configure. If you find that you need to edit this file to make things
+# work, let the course staff know and we'll try to fix the configure script.
+#
+# 
+# The purpose of this file is to hold all the makefile definitions
+# needed to adjust the OS/161 build process to any particular
+# environment. If I've done it right, all you need to do is rerun the
+# configure script and make clean if you decide to work from Linux or
+# BSD instead of Digital Unix. If I've done it mostly right, you may
+# need to edit this file but you still hopefully won't need to edit
+# any of the makefiles.
+#
+
+
+#
+# Initialize various variables that we set only with += in case some make
+# has a default value we weren't expecting.
+#
+CFLAGS=
+KCFLAGS=
+HOST_CFLAGS=
+LDFLAGS=
+KLDFLAGS=
+HOST_LDFLAGS=
+LIBS=
+HOST_LIBS=
+
+#
+# Location of installed runnable system tree.
+#
+# This must be an absolute path, because it is used from different
+# levels of the source tree.
+#
+OSTREE=$(HOME)/cs161/root
+
+#
+# Name of the platform we're building OS/161 to run on.
+#
+PLATFORM=mips
+
+#
+# As of cs161-toolchain-1.2 the MIPS toolchain is a mips-linux one
+# that generates more or less SVR4 ELF ABI compliant code. This means
+# that by default all code is PIC (position-independent code), which
+# is all very well but not what we want. So we use -fno-pic to turn
+# this behavior off. It turns out you need -mno-abicalls too to turn
+# it off completely.
+#
+CFLAGS+=-mno-abicalls -fno-pic
+KCFLAGS+=-mno-abicalls -fno-pic
+
+# If using an older cs161-toolchain for MIPS, you'll need this instead:
+#LDFLAGS+=-Ttext 0x1000
+#
+# Because OS/161 runs on one architecture (probably MIPS or ANT32) and
+# is compiled on another (probably Alpha or i386) it is important to
+# make sure the right compiler (and assembler, linker, etc.) is used
+# at every point.
+#
+# A compiler compiles *running on* one platform, and *generates code*
+# that may run on a different platform. Thus, supposing that you are 
+# building MIPS OS/161 on i386 Linux, there are four possible compilers.
+# (If you are building some other OS/161 or building on some other
+# platform, make the appropriate substitutions.) These four are:
+#
+#    (1) runs on i386 Linux, generates code for i386 Linux
+#    (2) runs on i386 Linux, generates code for MIPS OS/161
+#    (3) runs on MIPS OS/161, generates code for i386 Linux
+#    (4) runs on MIPS OS/161, generates code for MIPS OS/161
+#
+# Note that when building on i386 Linux, there is no use for a
+# compiler that runs on MIPS OS/161; you can't run it. Thus cases
+# (3) and (4) do not interest us.
+#
+# However, in the course of the build, there are places where it is
+# necessary to compile and run programs on the machine the build is
+# happening on. Thus, the makefiles need to be able to access *both*
+# compiler (1) and compiler (2).
+#
+# We do this by defining the make variable CC to be the common case,
+# compiler (2), and the make variable HOST_CC to be compiler (1). 
+# Similar variables are defined for the other bits of the toolchain,
+# like AS (assembler), LD (linker), and SIZE (size program).
+#
+# Then, programs to be run during the build can be compiled with 
+# HOST_CC, and components of the system can be built with CC.
+#
+
+
+# CC: compiler, when compiling to object files
+CC=cs161-gcc 
+# LDCC: compiler, when linking
+LDCC=cs161-gcc
+# AS: assembler.
+AS=cs161-as
+# LD: linker
+LD=cs161-ld
+# AR: archiver (librarian)
+AR=cs161-ar
+# RANLIB: library postprocessor
+RANLIB=cs161-ranlib
+# NM: prints symbol tables
+NM=cs161-nm
+# SIZE: prints size of binaries
+SIZE=cs161-size
+# STRIP: strips debug info
+STRIP=cs161-strip
+
+
+# compiler for host system
+HOST_CC=gcc
+
+# compiler for host system, when linking
+HOST_LDCC=gcc
+
+# assembler for host system
+HOST_AS=as
+
+# linker for host system
+HOST_LD=ld
+
+# archiver (librarian) for host system
+HOST_AR=ar
+
+# ranlib (library postprocessor) for host system... or "true" to skip it
+HOST_RANLIB=ranlib
+
+# nm for host system
+HOST_NM=nm
+
+# size for host system
+HOST_SIZE=size
+
+# strip for host system
+HOST_STRIP=strip
+
+
+# The HOST_... versions are for compiling/linking for the host system.
+# The K... versions are for the kernel build. 
+
+# Compile flags. 
+# The kernel has its own debug/optimize setting in the kernel config, so
+# we don't include ours.
+CFLAGS+=-Wall -W -Wwrite-strings -O2
+KCFLAGS+=-Wall -W -Wwrite-strings
+HOST_CFLAGS+=-Wall -W -Wwrite-strings -O2 -I$(OSTREE)/hostinclude
+
+# Linker flags
+LDFLAGS+=
+KLDFLAGS+=
+HOST_LDFLAGS+=
+
+# Libraries
+# 
+LIBS+=
+HOST_LIBS+=
+
+
+# These are cflags used to conditionally compile src/lib/hostcompat.
+COMPAT_CFLAGS=
+
+# These are make targets that we conditionally enable when installing
+# in src/lib/hostcompat.
+COMPAT_TARGETS=
+
+
+# When we compile OS/161 programs, we want to use the OS/161 header files
+# and libraries. By default, gcc will look in some include directory and
+# some lib directory that it was told to use when it was compiled. We 
+# assume that directory isn't ours. (If it is, all these variables can
+# be set to empty, but everything will still work if you don't.)
+TREE_CFLAGS=-nostdinc -I$(OSTREE)/include
+TREE_LDFLAGS=-nostdlib -L$(OSTREE)/lib $(OSTREE)/lib/crt0.o
+TREE_LIBS=-lc
diff --git a/kern/compile/ASST1/Makefile b/kern/compile/ASST1/Makefile
new file mode 100644
index 0000000..3e24232
--- /dev/null
+++ b/kern/compile/ASST1/Makefile
@@ -0,0 +1,196 @@
+# Automatically generated by config.
+# Edit arch/mips/conf/Makefile.mips instead, and rerun config.
+#
+
+#
+# Makefile.mips
+#
+# OS/161 kernel makefile base for the MIPS r2000/r3000.
+#
+# The actual makefiles used are copies of this file - if you want to edit,
+# edit kern/arch/mips/conf/Makefile.mips and rerun config.
+#
+
+
+#
+# Filename for the kernel.
+#
+KERNEL=kernel
+
+#
+# Get the defs that were dumped out from the kernel config tool.
+# This defines:
+#	S		Path for top of kernel source tree
+#	ARCH		Architecture ("mips")
+#	DEBUGFLAGS	-O2 or -g
+#	CONFNAME	The name of the kernel config, e.g., ASST1
+#
+include defs.mk
+
+#
+# Get the tree-wide defs.
+# This defines (that we use):
+#	OSTREE		Path for top of installed system tree
+#	CC		C compiler
+#	KCFLAGS		C compiler flags for kernel
+#	LD		Linker
+#	KLDFLAGS	Linker flags for kernel
+#	SIZE		Object file size tool
+#
+include $S/../defs.mk
+
+#
+# Adjust defs for building the kernel.
+#
+# The LOAD_ADDRESS is the virtual address where the kernel will be loaded
+# into memory. This is in the direct-mapped cached segment of the MIPS
+# address space. -Ttext is the linker option for setting it.
+#
+# -T provides the linker with a "linker script". This is a piece of
+# obscure mumble that tells the linker how to put together the output
+# program. The only reason we need it is that the linker breaks if you
+# try to use -Ttext and its default built-in linker script at the same
+# time.
+#
+# -nostdinc prevents including header files other than our own, and 
+# -nostdlib prevents linking against any standard libraries. Because
+# the kernel has to be a completely standalone program, this is important.
+#
+# -ffreestanding tells gcc this is not an ordinary program, so it will
+# make fewer unwise assumptions about standard library functions.
+#
+# We define _KERNEL so certain source files that are shared between the
+# kernel and userland (like strcpy.c) can tell the difference so they know
+# which header files to use.
+#
+# -G 0 tells the assembler and linker not to reference global variables
+# via the "global pointer" (MIPS gp register) because we don't support 
+# handling the gp register.
+#
+LOAD_ADDRESS=0x80001000
+INCLUDES=-nostdinc -I$S/include -I$S/dev -I. 
+CFLAGS=$(KCFLAGS) $(DEBUGFLAGS) $(INCLUDES) -ffreestanding -D_KERNEL -G 0
+LDFLAGS=$(KLDFLAGS) -nostdlib \
+	-Ttext $(LOAD_ADDRESS) -T $S/arch/mips/conf/ldscript \
+	-G 0
+
+#
+# Rules for compiling various kinds of source files, by suffix.
+# (There's nothing magical about these names and make.)
+#
+# We don't actually use C++ in OS/161, although, with some fiddling,
+# you might be able to. But you must turn off exceptions and RTTI in
+# order to do so (the implementations of these in gcc are completely 
+# unsuitable for kernels.)
+#
+COMPILE.cc=$(CC) $(CFLAGS) -fno-rtti -fno-exceptions -c
+COMPILE.c=$(CC) $(CFLAGS) -c
+COMPILE.l=false   # redefine when needed 
+COMPILE.y=false   # redefine when needed 
+COMPILE.S=$(CC) $(CFLAGS) -c
+
+#
+# This should expand to all the header files in the kernel so they can
+# be fed to tags.
+#
+TAGS_HEADERS=$S/include/*.h $S/include/kern/*.h $S/arch/$(ARCH)/include/*.h
+
+#
+# Default make rule: build the kernel.
+#
+all: $(KERNEL)
+
+#
+# Here's how we link the kernel. 
+#
+# vers.c/.o is generated on every build. It contains a numeric serial
+# number incremented every time newvers.sh is run.  These values are
+# printed out by newvers.sh and are also displayed at boot time. This
+# makes it possible to tell at a glance whether you're actually
+# running the same kernel you just compiled.
+#
+# The version number is kept in the file called "version" in the build
+# directory.
+#
+# By immemorial tradition, "size" is run on the kernel after it's linked.
+#
+$(KERNEL):
+	$S/conf/newvers.sh $(CONFNAME)
+	$(COMPILE.c) vers.c
+	$(LD) $(LDFLAGS) $(OBJS) vers.o -o $(KERNEL)
+	$(SIZE) $(KERNEL)
+
+#
+# Use the -M argument to gcc to get it to output dependency information.
+# Note that we use -M, which includes deps for #include <...> files,
+# rather than -MM, which doesn't. This is because we are the operating
+# system: the #include <...> files are part of our project - in fact, in
+# the kernel they're the kernel's own include files - and they will be
+# changing!
+#
+depend:
+	$(CC) $(CFLAGS) -M $(SRCS) > depend.mk
+
+#
+# Remove everything generated during the compile.
+# (To remove absolutely everything automatically generated, you can just
+# blow away the whole compile directory.)
+#
+clean:
+	rm -f *.o *.a tags $(KERNEL)
+
+#
+# Rerun config for this configuration.
+#
+reconfig:
+	(cd ../../conf && ./config $(CONFNAME))
+
+#
+# [ -d $(OSTREE) ] succeeds if $(OSTREE) is a directory.
+# (See test(1).) Thus, if $(OSTREE) doesn't exist, it will be created.
+#
+
+# The kernel gets installed at the top of the installed system tree.
+# Since with OS/161 it's relatively likely that you'll be working with
+# several configurations at once, it gets installed under the name of
+# this config, and a symbolic link with the "real" name is set up to
+# point to the last kernel installed.
+#
+install:
+	[ -d $(OSTREE) ] || mkdir $(OSTREE)
+	cp $(KERNEL) $(OSTREE)/$(KERNEL)-$(CONFNAME)
+	-rm -f $(OSTREE)/$(KERNEL)
+	ln -s $(KERNEL)-$(CONFNAME) $(OSTREE)/$(KERNEL)
+
+#
+# Run tags on all the sources and header files. This is probably not
+# the most useful way to do this and needs attention. (XXX)
+#
+tags:
+	ctags -wtd $(SRCS) $(TAGS_HEADERS)
+
+#
+# This tells make that these rules are not files so it (hopefully)
+# won't become confused if files by those names appear.
+#
+.PHONY: all depend clean install tags reconfig
+
+#
+# Get the list of source files from where it was generated by the 
+# kernel config tool.
+#
+# This sets SRCS and OBJS, and also defines a rule for compiling each
+# source file.
+#
+include files.mk
+
+# Get dependency information.
+include depend.mk
+
+#
+# Tell make that the kernel depends on the object files listed in $(OBJS).
+# This (unlike the link commands that also use $(OBJS) above) must come
+# after the include of files.mk, because of the way make reads its input
+# and evaluates variables.
+#
+$(KERNEL): $(OBJS)
diff --git a/kern/compile/ASST1/__printf.o b/kern/compile/ASST1/__printf.o
new file mode 100644
index 0000000..fcb4a36
Binary files /dev/null and b/kern/compile/ASST1/__printf.o differ
diff --git a/kern/compile/ASST1/array.o b/kern/compile/ASST1/array.o
new file mode 100644
index 0000000..1a37dc6
Binary files /dev/null and b/kern/compile/ASST1/array.o differ
diff --git a/kern/compile/ASST1/arraytest.o b/kern/compile/ASST1/arraytest.o
new file mode 100644
index 0000000..ad627d5
Binary files /dev/null and b/kern/compile/ASST1/arraytest.o differ
diff --git a/kern/compile/ASST1/atoi.o b/kern/compile/ASST1/atoi.o
new file mode 100644
index 0000000..4c01f75
Binary files /dev/null and b/kern/compile/ASST1/atoi.o differ
diff --git a/kern/compile/ASST1/autoconf.c b/kern/compile/ASST1/autoconf.c
new file mode 100644
index 0000000..c9cdf87
--- /dev/null
+++ b/kern/compile/ASST1/autoconf.c
@@ -0,0 +1,455 @@
+/* Automatically generated; do not edit */
+#include <types.h>
+#include <lib.h>
+#include "autoconf.h"
+
+static void autoconf_beep(struct beep_softc *, int);
+static void autoconf_con(struct con_softc *, int);
+static void autoconf_emu(struct emu_softc *, int);
+static void autoconf_lhd(struct lhd_softc *, int);
+static void autoconf_lrandom(struct lrandom_softc *, int);
+static void autoconf_lser(struct lser_softc *, int);
+static void autoconf_ltimer(struct ltimer_softc *, int);
+static void autoconf_ltrace(struct ltrace_softc *, int);
+static void autoconf_pseudorand(struct pseudorand_softc *, int);
+static void autoconf_random(struct random_softc *, int);
+static void autoconf_rtclock(struct rtclock_softc *, int);
+static int nextunit_beep;
+static int nextunit_con;
+static int nextunit_emu;
+static int nextunit_lhd;
+static int nextunit_lrandom;
+static int nextunit_lser;
+static int nextunit_ltimer;
+static int nextunit_ltrace;
+static int nextunit_random;
+static int nextunit_rtclock;
+
+static
+int
+tryattach_emu_to_lamebus(int devunit, struct lamebus_softc *bus, int busunit)
+{
+	struct emu_softc *dev;
+	int result;
+
+	dev = attach_emu_to_lamebus(devunit, bus);
+	if (dev==NULL) {
+		return -1;
+	}
+	kprintf("emu%d at lamebus%d", devunit, busunit);
+	result = config_emu(dev, devunit);
+	if (result != 0) {
+		kprintf(": %s\n", strerror(result));
+		/* should really clean up dev */
+		return result;
+	}
+	kprintf("\n");
+	nextunit_emu = devunit+1;
+	autoconf_emu(dev, devunit);
+	return 0;
+}
+
+static
+int
+tryattach_ltrace_to_lamebus(int devunit, struct lamebus_softc *bus, int busunit)
+{
+	struct ltrace_softc *dev;
+	int result;
+
+	dev = attach_ltrace_to_lamebus(devunit, bus);
+	if (dev==NULL) {
+		return -1;
+	}
+	kprintf("ltrace%d at lamebus%d", devunit, busunit);
+	result = config_ltrace(dev, devunit);
+	if (result != 0) {
+		kprintf(": %s\n", strerror(result));
+		/* should really clean up dev */
+		return result;
+	}
+	kprintf("\n");
+	nextunit_ltrace = devunit+1;
+	autoconf_ltrace(dev, devunit);
+	return 0;
+}
+
+static
+int
+tryattach_ltimer_to_lamebus(int devunit, struct lamebus_softc *bus, int busunit)
+{
+	struct ltimer_softc *dev;
+	int result;
+
+	dev = attach_ltimer_to_lamebus(devunit, bus);
+	if (dev==NULL) {
+		return -1;
+	}
+	kprintf("ltimer%d at lamebus%d", devunit, busunit);
+	result = config_ltimer(dev, devunit);
+	if (result != 0) {
+		kprintf(": %s\n", strerror(result));
+		/* should really clean up dev */
+		return result;
+	}
+	kprintf("\n");
+	nextunit_ltimer = devunit+1;
+	autoconf_ltimer(dev, devunit);
+	return 0;
+}
+
+static
+int
+tryattach_lrandom_to_lamebus(int devunit, struct lamebus_softc *bus, int busunit)
+{
+	struct lrandom_softc *dev;
+	int result;
+
+	dev = attach_lrandom_to_lamebus(devunit, bus);
+	if (dev==NULL) {
+		return -1;
+	}
+	kprintf("lrandom%d at lamebus%d", devunit, busunit);
+	result = config_lrandom(dev, devunit);
+	if (result != 0) {
+		kprintf(": %s\n", strerror(result));
+		/* should really clean up dev */
+		return result;
+	}
+	kprintf("\n");
+	nextunit_lrandom = devunit+1;
+	autoconf_lrandom(dev, devunit);
+	return 0;
+}
+
+static
+int
+tryattach_lhd_to_lamebus(int devunit, struct lamebus_softc *bus, int busunit)
+{
+	struct lhd_softc *dev;
+	int result;
+
+	dev = attach_lhd_to_lamebus(devunit, bus);
+	if (dev==NULL) {
+		return -1;
+	}
+	kprintf("lhd%d at lamebus%d", devunit, busunit);
+	result = config_lhd(dev, devunit);
+	if (result != 0) {
+		kprintf(": %s\n", strerror(result));
+		/* should really clean up dev */
+		return result;
+	}
+	kprintf("\n");
+	nextunit_lhd = devunit+1;
+	autoconf_lhd(dev, devunit);
+	return 0;
+}
+
+static
+int
+tryattach_lser_to_lamebus(int devunit, struct lamebus_softc *bus, int busunit)
+{
+	struct lser_softc *dev;
+	int result;
+
+	dev = attach_lser_to_lamebus(devunit, bus);
+	if (dev==NULL) {
+		return -1;
+	}
+	kprintf("lser%d at lamebus%d", devunit, busunit);
+	result = config_lser(dev, devunit);
+	if (result != 0) {
+		kprintf(": %s\n", strerror(result));
+		/* should really clean up dev */
+		return result;
+	}
+	kprintf("\n");
+	nextunit_lser = devunit+1;
+	autoconf_lser(dev, devunit);
+	return 0;
+}
+
+static
+int
+tryattach_beep_to_ltimer(int devunit, struct ltimer_softc *bus, int busunit)
+{
+	struct beep_softc *dev;
+	int result;
+
+	dev = attach_beep_to_ltimer(devunit, bus);
+	if (dev==NULL) {
+		return -1;
+	}
+	kprintf("beep%d at ltimer%d", devunit, busunit);
+	result = config_beep(dev, devunit);
+	if (result != 0) {
+		kprintf(": %s\n", strerror(result));
+		/* should really clean up dev */
+		return result;
+	}
+	kprintf("\n");
+	nextunit_beep = devunit+1;
+	autoconf_beep(dev, devunit);
+	return 0;
+}
+
+static
+int
+tryattach_con_to_lser(int devunit, struct lser_softc *bus, int busunit)
+{
+	struct con_softc *dev;
+	int result;
+
+	dev = attach_con_to_lser(devunit, bus);
+	if (dev==NULL) {
+		return -1;
+	}
+	kprintf("con%d at lser%d", devunit, busunit);
+	result = config_con(dev, devunit);
+	if (result != 0) {
+		kprintf(": %s\n", strerror(result));
+		/* should really clean up dev */
+		return result;
+	}
+	kprintf("\n");
+	nextunit_con = devunit+1;
+	autoconf_con(dev, devunit);
+	return 0;
+}
+
+static
+int
+tryattach_rtclock_to_ltimer(int devunit, struct ltimer_softc *bus, int busunit)
+{
+	struct rtclock_softc *dev;
+	int result;
+
+	dev = attach_rtclock_to_ltimer(devunit, bus);
+	if (dev==NULL) {
+		return -1;
+	}
+	kprintf("rtclock%d at ltimer%d", devunit, busunit);
+	result = config_rtclock(dev, devunit);
+	if (result != 0) {
+		kprintf(": %s\n", strerror(result));
+		/* should really clean up dev */
+		return result;
+	}
+	kprintf("\n");
+	nextunit_rtclock = devunit+1;
+	autoconf_rtclock(dev, devunit);
+	return 0;
+}
+
+static
+int
+tryattach_random_to_lrandom(int devunit, struct lrandom_softc *bus, int busunit)
+{
+	struct random_softc *dev;
+	int result;
+
+	dev = attach_random_to_lrandom(devunit, bus);
+	if (dev==NULL) {
+		return -1;
+	}
+	kprintf("random%d at lrandom%d", devunit, busunit);
+	result = config_random(dev, devunit);
+	if (result != 0) {
+		kprintf(": %s\n", strerror(result));
+		/* should really clean up dev */
+		return result;
+	}
+	kprintf("\n");
+	nextunit_random = devunit+1;
+	autoconf_random(dev, devunit);
+	return 0;
+}
+
+static
+int
+tryattach_random_to_pseudorand(int devunit, struct pseudorand_softc *bus, int busunit)
+{
+	struct random_softc *dev;
+	int result;
+
+	dev = attach_random_to_pseudorand(devunit, bus);
+	if (dev==NULL) {
+		return -1;
+	}
+	kprintf("random%d at pseudorand%d", devunit, busunit);
+	result = config_random(dev, devunit);
+	if (result != 0) {
+		kprintf(": %s\n", strerror(result));
+		/* should really clean up dev */
+		return result;
+	}
+	kprintf("\n");
+	nextunit_random = devunit+1;
+	autoconf_random(dev, devunit);
+	return 0;
+}
+
+
+static
+void
+autoconf_con(struct con_softc *bus, int busunit)
+{
+	(void)bus; (void)busunit;
+}
+
+static
+void
+autoconf_lser(struct lser_softc *bus, int busunit)
+{
+	(void)bus; (void)busunit;
+	{
+		if (nextunit_con <= 0) {
+			tryattach_con_to_lser(0, bus, busunit);
+		}
+	}
+}
+
+static
+void
+autoconf_lhd(struct lhd_softc *bus, int busunit)
+{
+	(void)bus; (void)busunit;
+}
+
+static
+void
+autoconf_emu(struct emu_softc *bus, int busunit)
+{
+	(void)bus; (void)busunit;
+}
+
+void
+autoconf_pseudorand(struct pseudorand_softc *bus, int busunit)
+{
+	(void)bus; (void)busunit;
+	if (busunit==0) {
+		if (nextunit_random <= 0) {
+			tryattach_random_to_pseudorand(0, bus, busunit);
+		}
+	}
+}
+
+static
+void
+autoconf_random(struct random_softc *bus, int busunit)
+{
+	(void)bus; (void)busunit;
+}
+
+static
+void
+autoconf_ltimer(struct ltimer_softc *bus, int busunit)
+{
+	(void)bus; (void)busunit;
+	{
+		if (nextunit_beep <= 0) {
+			tryattach_beep_to_ltimer(0, bus, busunit);
+		}
+	}
+	{
+		if (nextunit_rtclock <= 0) {
+			tryattach_rtclock_to_ltimer(0, bus, busunit);
+		}
+	}
+}
+
+void
+autoconf_lamebus(struct lamebus_softc *bus, int busunit)
+{
+	(void)bus; (void)busunit;
+	{
+		int result, devunit=nextunit_emu;
+		do {
+			result = tryattach_emu_to_lamebus(devunit, bus, busunit);
+			devunit++;
+		} while (result==0);
+	}
+	{
+		int result, devunit=nextunit_ltrace;
+		do {
+			result = tryattach_ltrace_to_lamebus(devunit, bus, busunit);
+			devunit++;
+		} while (result==0);
+	}
+	{
+		int result, devunit=nextunit_ltimer;
+		do {
+			result = tryattach_ltimer_to_lamebus(devunit, bus, busunit);
+			devunit++;
+		} while (result==0);
+	}
+	{
+		int result, devunit=nextunit_lrandom;
+		do {
+			result = tryattach_lrandom_to_lamebus(devunit, bus, busunit);
+			devunit++;
+		} while (result==0);
+	}
+	{
+		int result, devunit=nextunit_lhd;
+		do {
+			result = tryattach_lhd_to_lamebus(devunit, bus, busunit);
+			devunit++;
+		} while (result==0);
+	}
+	{
+		int result, devunit=nextunit_lser;
+		do {
+			result = tryattach_lser_to_lamebus(devunit, bus, busunit);
+			devunit++;
+		} while (result==0);
+	}
+}
+
+static
+void
+autoconf_beep(struct beep_softc *bus, int busunit)
+{
+	(void)bus; (void)busunit;
+}
+
+static
+void
+autoconf_lrandom(struct lrandom_softc *bus, int busunit)
+{
+	(void)bus; (void)busunit;
+	{
+		if (nextunit_random <= 0) {
+			tryattach_random_to_lrandom(0, bus, busunit);
+		}
+	}
+}
+
+static
+void
+autoconf_rtclock(struct rtclock_softc *bus, int busunit)
+{
+	(void)bus; (void)busunit;
+}
+
+static
+void
+autoconf_ltrace(struct ltrace_softc *bus, int busunit)
+{
+	(void)bus; (void)busunit;
+}
+
+void
+pseudoconfig(void)
+{
+	{
+		struct pseudorand_softc *s;
+		
+		s = pseudoattach_pseudorand(0);
+		if (s!=NULL) {
+			kprintf("pseudorand0 (virtual)\n");
+			autoconf_pseudorand(s, 0);
+		}
+	}
+}
+
diff --git a/kern/compile/ASST1/autoconf.h b/kern/compile/ASST1/autoconf.h
new file mode 100644
index 0000000..13ab76c
--- /dev/null
+++ b/kern/compile/ASST1/autoconf.h
@@ -0,0 +1,48 @@
+/* Automatically generated; do not edit */
+#ifndef _AUTOCONF_H_
+#define _AUTOCONF_H_
+
+struct lamebus_softc;
+struct emu_softc;
+struct ltrace_softc;
+struct ltimer_softc;
+struct lrandom_softc;
+struct lhd_softc;
+struct lser_softc;
+struct beep_softc;
+struct con_softc;
+struct rtclock_softc;
+struct random_softc;
+struct pseudorand_softc;
+struct random_softc;
+
+void autoconf_lamebus(struct lamebus_softc *dev, int unit);
+
+struct emu_softc *attach_emu_to_lamebus(int devunit, struct lamebus_softc *bus);
+struct ltrace_softc *attach_ltrace_to_lamebus(int devunit, struct lamebus_softc *bus);
+struct ltimer_softc *attach_ltimer_to_lamebus(int devunit, struct lamebus_softc *bus);
+struct lrandom_softc *attach_lrandom_to_lamebus(int devunit, struct lamebus_softc *bus);
+struct lhd_softc *attach_lhd_to_lamebus(int devunit, struct lamebus_softc *bus);
+struct lser_softc *attach_lser_to_lamebus(int devunit, struct lamebus_softc *bus);
+struct beep_softc *attach_beep_to_ltimer(int devunit, struct ltimer_softc *bus);
+struct con_softc *attach_con_to_lser(int devunit, struct lser_softc *bus);
+struct rtclock_softc *attach_rtclock_to_ltimer(int devunit, struct ltimer_softc *bus);
+struct random_softc *attach_random_to_lrandom(int devunit, struct lrandom_softc *bus);
+struct pseudorand_softc *pseudoattach_pseudorand(int devunit);
+struct random_softc *attach_random_to_pseudorand(int devunit, struct pseudorand_softc *bus);
+
+int config_emu(struct emu_softc *dev, int unit);
+int config_ltrace(struct ltrace_softc *dev, int unit);
+int config_ltimer(struct ltimer_softc *dev, int unit);
+int config_lrandom(struct lrandom_softc *dev, int unit);
+int config_lhd(struct lhd_softc *dev, int unit);
+int config_lser(struct lser_softc *dev, int unit);
+int config_beep(struct beep_softc *dev, int unit);
+int config_con(struct con_softc *dev, int unit);
+int config_rtclock(struct rtclock_softc *dev, int unit);
+int config_random(struct random_softc *dev, int unit);
+int config_random(struct random_softc *dev, int unit);
+
+void pseudoconfig(void);
+
+#endif /* _AUTOCONF_H_ */
diff --git a/kern/compile/ASST1/autoconf.o b/kern/compile/ASST1/autoconf.o
new file mode 100644
index 0000000..591c0a1
Binary files /dev/null and b/kern/compile/ASST1/autoconf.o differ
diff --git a/kern/compile/ASST1/beep.o b/kern/compile/ASST1/beep.o
new file mode 100644
index 0000000..82cac4c
Binary files /dev/null and b/kern/compile/ASST1/beep.o differ
diff --git a/kern/compile/ASST1/beep_ltimer.o b/kern/compile/ASST1/beep_ltimer.o
new file mode 100644
index 0000000..f5780a8
Binary files /dev/null and b/kern/compile/ASST1/beep_ltimer.o differ
diff --git a/kern/compile/ASST1/bitmap.o b/kern/compile/ASST1/bitmap.o
new file mode 100644
index 0000000..8f4784f
Binary files /dev/null and b/kern/compile/ASST1/bitmap.o differ
diff --git a/kern/compile/ASST1/bitmaptest.o b/kern/compile/ASST1/bitmaptest.o
new file mode 100644
index 0000000..617708d
Binary files /dev/null and b/kern/compile/ASST1/bitmaptest.o differ
diff --git a/kern/compile/ASST1/bzero.o b/kern/compile/ASST1/bzero.o
new file mode 100644
index 0000000..b6f23bf
Binary files /dev/null and b/kern/compile/ASST1/bzero.o differ
diff --git a/kern/compile/ASST1/cache_mips1.o b/kern/compile/ASST1/cache_mips1.o
new file mode 100644
index 0000000..c687433
Binary files /dev/null and b/kern/compile/ASST1/cache_mips1.o differ
diff --git a/kern/compile/ASST1/catlock.o b/kern/compile/ASST1/catlock.o
new file mode 100644
index 0000000..4ad1584
Binary files /dev/null and b/kern/compile/ASST1/catlock.o differ
diff --git a/kern/compile/ASST1/catsem.o b/kern/compile/ASST1/catsem.o
new file mode 100644
index 0000000..3af0a9c
Binary files /dev/null and b/kern/compile/ASST1/catsem.o differ
diff --git a/kern/compile/ASST1/con_lser.o b/kern/compile/ASST1/con_lser.o
new file mode 100644
index 0000000..a4b358d
Binary files /dev/null and b/kern/compile/ASST1/con_lser.o differ
diff --git a/kern/compile/ASST1/console.o b/kern/compile/ASST1/console.o
new file mode 100644
index 0000000..765f1e9
Binary files /dev/null and b/kern/compile/ASST1/console.o differ
diff --git a/kern/compile/ASST1/copyinout.o b/kern/compile/ASST1/copyinout.o
new file mode 100644
index 0000000..92e0981
Binary files /dev/null and b/kern/compile/ASST1/copyinout.o differ
diff --git a/kern/compile/ASST1/defs.mk b/kern/compile/ASST1/defs.mk
new file mode 100644
index 0000000..09db3ea
--- /dev/null
+++ b/kern/compile/ASST1/defs.mk
@@ -0,0 +1,5 @@
+# Automatically generated by config; do not edit
+S=../..
+ARCH=mips
+DEBUGFLAGS=-g
+CONFNAME=ASST1
diff --git a/kern/compile/ASST1/depend.mk b/kern/compile/ASST1/depend.mk
new file mode 100644
index 0000000..3861979
--- /dev/null
+++ b/kern/compile/ASST1/depend.mk
@@ -0,0 +1,357 @@
+console.o: ../../dev/generic/console.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/kern/errno.h \
+  ../../include/lib.h machine/setjmp.h machine/spl.h \
+  ../../include/synch.h ../../dev/generic/console.h ../../include/dev.h \
+  ../../include/vfs.h ../../include/uio.h autoconf.h
+emu.o: ../../dev/lamebus/emu.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/kern/errno.h \
+  ../../include/kern/unistd.h ../../include/kern/stat.h \
+  ../../include/lib.h machine/setjmp.h ../../include/synch.h \
+  ../../include/array.h ../../include/uio.h ../../include/vfs.h \
+  ../../include/emufs.h ../../include/vnode.h ../../include/fs.h \
+  ../../dev/lamebus/emu.h machine/bus.h machine/vm.h \
+  ../../dev/lamebus/lamebus.h autoconf.h
+lser.o: ../../dev/lamebus/lser.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/lib.h machine/setjmp.h \
+  machine/spl.h machine/bus.h machine/vm.h ../../dev/lamebus/lamebus.h \
+  ../../dev/lamebus/lser.h autoconf.h
+lhd.o: ../../dev/lamebus/lhd.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/lib.h machine/setjmp.h \
+  ../../include/synch.h ../../include/kern/errno.h machine/bus.h \
+  machine/vm.h ../../dev/lamebus/lamebus.h ../../include/uio.h \
+  ../../include/vfs.h ../../dev/lamebus/lhd.h ../../include/dev.h \
+  autoconf.h
+pseudorand.o: ../../dev/generic/pseudorand.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/lib.h \
+  machine/setjmp.h ../../include/uio.h ../../dev/generic/pseudorand.h \
+  autoconf.h
+random.o: ../../dev/generic/random.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/kern/errno.h \
+  ../../include/kern/unistd.h ../../include/lib.h machine/setjmp.h \
+  ../../include/uio.h ../../include/vfs.h ../../dev/generic/random.h \
+  ../../include/dev.h autoconf.h
+ltimer.o: ../../dev/lamebus/ltimer.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/lib.h \
+  machine/setjmp.h ../../include/clock.h opt-synchprobs.h machine/bus.h \
+  machine/vm.h ../../dev/lamebus/lamebus.h ../../dev/lamebus/ltimer.h \
+  autoconf.h
+lamebus.o: ../../dev/lamebus/lamebus.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/lib.h \
+  machine/setjmp.h machine/spl.h ../../dev/lamebus/lamebus.h
+lrandom.o: ../../dev/lamebus/lrandom.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/lib.h \
+  machine/setjmp.h ../../include/uio.h machine/bus.h machine/vm.h \
+  ../../dev/lamebus/lamebus.h ../../dev/lamebus/lrandom.h autoconf.h
+beep.o: ../../dev/generic/beep.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/kern/errno.h \
+  ../../include/lib.h machine/setjmp.h ../../dev/generic/beep.h \
+  autoconf.h
+ltrace.o: ../../dev/lamebus/ltrace.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/lib.h \
+  machine/setjmp.h machine/bus.h machine/vm.h ../../dev/lamebus/lamebus.h \
+  ../../dev/lamebus/ltrace.h autoconf.h
+rtclock.o: ../../dev/generic/rtclock.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/kern/errno.h \
+  ../../include/lib.h machine/setjmp.h ../../include/clock.h \
+  opt-synchprobs.h ../../dev/generic/rtclock.h autoconf.h
+ltimer_att.o: ../../dev/lamebus/ltimer_att.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/lib.h \
+  machine/setjmp.h ../../dev/lamebus/lamebus.h ../../dev/lamebus/ltimer.h \
+  autoconf.h
+con_lser.o: ../../dev/lamebus/con_lser.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/lib.h \
+  machine/setjmp.h ../../dev/generic/console.h ../../dev/lamebus/lser.h \
+  autoconf.h
+lhd_att.o: ../../dev/lamebus/lhd_att.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/lib.h \
+  machine/setjmp.h ../../dev/lamebus/lamebus.h ../../dev/lamebus/lhd.h \
+  ../../include/dev.h autoconf.h
+random_lrandom.o: ../../dev/lamebus/random_lrandom.c \
+  ../../include/types.h machine/types.h ../../include/kern/types.h \
+  ../../include/lib.h machine/setjmp.h ../../dev/generic/random.h \
+  ../../include/dev.h ../../dev/lamebus/lrandom.h autoconf.h
+rtclock_ltimer.o: ../../dev/lamebus/rtclock_ltimer.c \
+  ../../include/types.h machine/types.h ../../include/kern/types.h \
+  ../../include/lib.h machine/setjmp.h ../../dev/generic/rtclock.h \
+  ../../dev/lamebus/ltimer.h autoconf.h
+ltrace_att.o: ../../dev/lamebus/ltrace_att.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/lib.h \
+  machine/setjmp.h ../../dev/lamebus/lamebus.h ../../dev/lamebus/ltrace.h \
+  autoconf.h
+lser_att.o: ../../dev/lamebus/lser_att.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/lib.h \
+  machine/setjmp.h ../../dev/lamebus/lamebus.h ../../dev/lamebus/lser.h \
+  autoconf.h
+lrandom_att.o: ../../dev/lamebus/lrandom_att.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/lib.h \
+  machine/setjmp.h ../../dev/lamebus/lamebus.h \
+  ../../dev/lamebus/lrandom.h autoconf.h
+emu_att.o: ../../dev/lamebus/emu_att.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/lib.h \
+  machine/setjmp.h ../../dev/lamebus/lamebus.h ../../dev/lamebus/emu.h \
+  autoconf.h
+beep_ltimer.o: ../../dev/lamebus/beep_ltimer.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/lib.h \
+  machine/setjmp.h ../../dev/generic/beep.h ../../dev/lamebus/ltimer.h \
+  autoconf.h
+pseudorand_att.o: ../../dev/generic/pseudorand_att.c \
+  ../../include/types.h machine/types.h ../../include/kern/types.h \
+  ../../include/lib.h machine/setjmp.h ../../dev/generic/random.h \
+  ../../include/dev.h ../../dev/generic/pseudorand.h autoconf.h
+catlock.o: ../../asst1/catlock.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/lib.h machine/setjmp.h \
+  ../../include/test.h ../../include/thread.h machine/pcb.h
+catsem.o: ../../asst1/catsem.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/lib.h machine/setjmp.h \
+  ../../include/test.h ../../include/thread.h machine/pcb.h
+sfs_vnode.o: ../../fs/sfs/sfs_vnode.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/lib.h \
+  machine/setjmp.h ../../include/synch.h ../../include/array.h \
+  ../../include/bitmap.h ../../include/kern/stat.h \
+  ../../include/kern/errno.h ../../include/kern/unistd.h \
+  ../../include/uio.h ../../include/dev.h ../../include/sfs.h \
+  ../../include/vnode.h ../../include/fs.h ../../include/kern/sfs.h
+sfs_fs.o: ../../fs/sfs/sfs_fs.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/lib.h machine/setjmp.h \
+  ../../include/kern/errno.h ../../include/array.h ../../include/bitmap.h \
+  ../../include/uio.h ../../include/dev.h ../../include/sfs.h \
+  ../../include/vnode.h ../../include/fs.h ../../include/kern/sfs.h \
+  ../../include/vfs.h
+dumbvm.o: ../../arch/mips/mips/dumbvm.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/kern/errno.h \
+  ../../include/lib.h machine/setjmp.h ../../include/thread.h \
+  machine/pcb.h ../../include/curthread.h ../../include/addrspace.h \
+  ../../include/vm.h machine/vm.h opt-dumbvm.h machine/spl.h \
+  machine/tlb.h
+stoplight.o: ../../asst1/stoplight.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/lib.h \
+  machine/setjmp.h ../../include/test.h ../../include/thread.h \
+  machine/pcb.h
+sfs_io.o: ../../fs/sfs/sfs_io.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/kern/errno.h \
+  ../../include/lib.h machine/setjmp.h ../../include/uio.h \
+  ../../include/sfs.h ../../include/vnode.h ../../include/fs.h \
+  ../../include/kern/sfs.h ../../include/dev.h
+cache_mips1.o: ../../arch/mips/mips/cache_mips1.S machine/asmdefs.h
+exception.o: ../../arch/mips/mips/exception.S machine/asmdefs.h \
+  machine/specialreg.h
+lamebus_mips.o: ../../arch/mips/mips/lamebus_mips.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/kern/unistd.h \
+  ../../include/lib.h machine/setjmp.h ../../include/synch.h \
+  machine/spl.h machine/pcb.h ../../include/dev.h machine/bus.h \
+  machine/vm.h ../../dev/lamebus/lamebus.h autoconf.h
+interrupt.o: ../../arch/mips/mips/interrupt.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/lib.h \
+  machine/setjmp.h machine/bus.h machine/vm.h ../../dev/lamebus/lamebus.h \
+  machine/spl.h machine/pcb.h
+pcb.o: ../../arch/mips/mips/pcb.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/lib.h machine/setjmp.h \
+  machine/pcb.h machine/spl.h machine/switchframe.h \
+  ../../include/thread.h
+ram.o: ../../arch/mips/mips/ram.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/lib.h machine/setjmp.h \
+  ../../include/vm.h machine/vm.h machine/pcb.h
+spl.o: ../../arch/mips/mips/spl.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/lib.h machine/setjmp.h \
+  machine/spl.h machine/specialreg.h
+start.o: ../../arch/mips/mips/start.S machine/asmdefs.h \
+  machine/specialreg.h
+switch.o: ../../arch/mips/mips/switch.S machine/asmdefs.h
+syscall.o: ../../arch/mips/mips/syscall.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/kern/errno.h \
+  ../../include/lib.h machine/setjmp.h machine/pcb.h machine/spl.h \
+  machine/trapframe.h ../../include/kern/callno.h ../../include/syscall.h
+threadstart.o: ../../arch/mips/mips/threadstart.S machine/asmdefs.h
+trap.o: ../../arch/mips/mips/trap.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/lib.h machine/setjmp.h \
+  machine/trapframe.h machine/specialreg.h machine/pcb.h machine/spl.h \
+  ../../include/vm.h machine/vm.h ../../include/thread.h \
+  ../../include/curthread.h
+tlb_mips1.o: ../../arch/mips/mips/tlb_mips1.S machine/asmdefs.h \
+  machine/specialreg.h
+mips-setjmp.o: ../../../lib/libc/mips-setjmp.S machine/asmdefs.h
+copyinout.o: ../../lib/copyinout.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/kern/errno.h \
+  ../../include/lib.h machine/setjmp.h machine/pcb.h ../../include/vm.h \
+  machine/vm.h ../../include/thread.h ../../include/curthread.h
+array.o: ../../lib/array.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/kern/errno.h \
+  ../../include/lib.h machine/setjmp.h ../../include/array.h
+bitmap.o: ../../lib/bitmap.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/lib.h machine/setjmp.h \
+  ../../include/kern/errno.h ../../include/bitmap.h
+queue.o: ../../lib/queue.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/kern/errno.h \
+  ../../include/lib.h machine/setjmp.h ../../include/queue.h
+kheap.o: ../../lib/kheap.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/lib.h machine/setjmp.h \
+  ../../include/vm.h machine/vm.h machine/spl.h
+kprintf.o: ../../lib/kprintf.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/stdarg.h ../../include/lib.h \
+  machine/setjmp.h ../../include/kern/unistd.h ../../include/synch.h \
+  ../../include/vfs.h ../../include/thread.h machine/pcb.h machine/spl.h
+kgets.o: ../../lib/kgets.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/lib.h machine/setjmp.h
+misc.o: ../../lib/misc.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/kern/errmsg.h \
+  ../../include/lib.h machine/setjmp.h
+ntoh.o: ../../lib/ntoh.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/lib.h machine/setjmp.h
+__printf.o: ../../../lib/libc/__printf.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/lib.h \
+  machine/setjmp.h ../../include/stdarg.h
+snprintf.o: ../../../lib/libc/snprintf.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/lib.h \
+  machine/setjmp.h ../../include/stdarg.h
+atoi.o: ../../../lib/libc/atoi.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/lib.h machine/setjmp.h
+bzero.o: ../../../lib/libc/bzero.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/lib.h machine/setjmp.h
+memcpy.o: ../../../lib/libc/memcpy.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/lib.h \
+  machine/setjmp.h
+memmove.o: ../../../lib/libc/memmove.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/lib.h \
+  machine/setjmp.h
+strcat.o: ../../../lib/libc/strcat.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/lib.h \
+  machine/setjmp.h
+strchr.o: ../../../lib/libc/strchr.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/lib.h \
+  machine/setjmp.h
+strcmp.o: ../../../lib/libc/strcmp.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/lib.h \
+  machine/setjmp.h
+strcpy.o: ../../../lib/libc/strcpy.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/lib.h \
+  machine/setjmp.h
+strlen.o: ../../../lib/libc/strlen.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/lib.h \
+  machine/setjmp.h
+strrchr.o: ../../../lib/libc/strrchr.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/lib.h \
+  machine/setjmp.h
+strtok_r.o: ../../../lib/libc/strtok_r.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/lib.h \
+  machine/setjmp.h
+init.o: ../../dev/init.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/lib.h machine/setjmp.h \
+  machine/spl.h ../../include/dev.h autoconf.h
+device.o: ../../fs/vfs/device.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/lib.h machine/setjmp.h \
+  ../../include/synch.h ../../include/kern/errno.h \
+  ../../include/kern/unistd.h ../../include/kern/stat.h \
+  ../../include/vnode.h ../../include/uio.h ../../include/dev.h
+vfscwd.o: ../../fs/vfs/vfscwd.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/lib.h machine/setjmp.h \
+  ../../include/synch.h ../../include/kern/errno.h \
+  ../../include/kern/stat.h ../../include/vfs.h ../../include/fs.h \
+  ../../include/vnode.h ../../include/uio.h ../../include/thread.h \
+  machine/pcb.h ../../include/curthread.h
+vfslist.o: ../../fs/vfs/vfslist.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/lib.h machine/setjmp.h \
+  ../../include/synch.h ../../include/array.h ../../include/kern/errno.h \
+  ../../include/vfs.h ../../include/vnode.h ../../include/fs.h \
+  ../../include/dev.h
+vfslookup.o: ../../fs/vfs/vfslookup.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/kern/errno.h \
+  ../../include/kern/limits.h ../../include/lib.h machine/setjmp.h \
+  ../../include/synch.h ../../include/vfs.h ../../include/vnode.h \
+  ../../include/fs.h
+vfspath.o: ../../fs/vfs/vfspath.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/kern/errno.h \
+  ../../include/kern/limits.h ../../include/kern/unistd.h \
+  ../../include/vfs.h ../../include/vnode.h ../../include/lib.h \
+  machine/setjmp.h
+vnode.o: ../../fs/vfs/vnode.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/kern/errno.h \
+  ../../include/lib.h machine/setjmp.h ../../include/synch.h \
+  ../../include/vnode.h
+devnull.o: ../../fs/vfs/devnull.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/kern/errno.h \
+  ../../include/lib.h machine/setjmp.h ../../include/vfs.h \
+  ../../include/dev.h ../../include/uio.h
+hardclock.o: ../../thread/hardclock.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/lib.h \
+  machine/setjmp.h machine/spl.h ../../include/thread.h machine/pcb.h \
+  ../../include/clock.h opt-synchprobs.h
+synch.o: ../../thread/synch.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/lib.h machine/setjmp.h \
+  ../../include/synch.h ../../include/thread.h machine/pcb.h \
+  ../../include/curthread.h machine/spl.h
+scheduler.o: ../../thread/scheduler.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/lib.h \
+  machine/setjmp.h ../../include/scheduler.h ../../include/thread.h \
+  machine/pcb.h machine/spl.h ../../include/queue.h
+thread.o: ../../thread/thread.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/lib.h machine/setjmp.h \
+  ../../include/kern/errno.h ../../include/array.h machine/spl.h \
+  machine/pcb.h ../../include/thread.h ../../include/curthread.h \
+  ../../include/scheduler.h ../../include/addrspace.h ../../include/vm.h \
+  machine/vm.h opt-dumbvm.h ../../include/vnode.h opt-synchprobs.h
+main.o: ../../main/main.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/kern/errno.h \
+  ../../include/kern/unistd.h ../../include/lib.h machine/setjmp.h \
+  machine/spl.h ../../include/test.h ../../include/synch.h \
+  ../../include/thread.h machine/pcb.h ../../include/scheduler.h \
+  ../../include/dev.h ../../include/vfs.h ../../include/vm.h machine/vm.h \
+  ../../include/syscall.h ../../include/version.h
+menu.o: ../../main/menu.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/kern/errno.h \
+  ../../include/kern/unistd.h ../../include/kern/limits.h \
+  ../../include/lib.h machine/setjmp.h ../../include/clock.h \
+  opt-synchprobs.h ../../include/thread.h machine/pcb.h \
+  ../../include/syscall.h ../../include/uio.h ../../include/vfs.h \
+  ../../include/sfs.h ../../include/vnode.h ../../include/fs.h \
+  ../../include/kern/sfs.h ../../include/test.h opt-synchprobs.h \
+  opt-sfs.h opt-net.h
+loadelf.o: ../../userprog/loadelf.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/kern/errno.h \
+  ../../include/lib.h machine/setjmp.h ../../include/uio.h \
+  ../../include/elf.h ../../include/addrspace.h ../../include/vm.h \
+  machine/vm.h opt-dumbvm.h ../../include/thread.h machine/pcb.h \
+  ../../include/curthread.h ../../include/vnode.h
+runprogram.o: ../../userprog/runprogram.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/kern/unistd.h \
+  ../../include/kern/errno.h ../../include/lib.h machine/setjmp.h \
+  ../../include/addrspace.h ../../include/vm.h machine/vm.h opt-dumbvm.h \
+  ../../include/thread.h machine/pcb.h ../../include/curthread.h \
+  ../../include/vfs.h ../../include/test.h
+uio.o: ../../userprog/uio.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/lib.h machine/setjmp.h \
+  ../../include/uio.h ../../include/thread.h machine/pcb.h \
+  ../../include/curthread.h
+arraytest.o: ../../test/arraytest.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/lib.h machine/setjmp.h \
+  ../../include/array.h ../../include/test.h
+bitmaptest.o: ../../test/bitmaptest.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/lib.h \
+  machine/setjmp.h ../../include/bitmap.h ../../include/test.h
+queuetest.o: ../../test/queuetest.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/lib.h machine/setjmp.h \
+  ../../include/queue.h ../../include/test.h
+threadtest.o: ../../test/threadtest.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/lib.h \
+  machine/setjmp.h ../../include/synch.h ../../include/thread.h \
+  machine/pcb.h ../../include/test.h
+tt3.o: ../../test/tt3.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/lib.h machine/setjmp.h \
+  machine/spl.h ../../include/synch.h ../../include/thread.h \
+  machine/pcb.h ../../include/test.h opt-synchprobs.h
+synchtest.o: ../../test/synchtest.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/lib.h machine/setjmp.h \
+  ../../include/synch.h ../../include/thread.h machine/pcb.h \
+  ../../include/test.h ../../include/clock.h opt-synchprobs.h
+malloctest.o: ../../test/malloctest.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/lib.h \
+  machine/setjmp.h ../../include/synch.h ../../include/thread.h \
+  machine/pcb.h ../../include/test.h
+fstest.o: ../../test/fstest.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/kern/errno.h \
+  ../../include/kern/unistd.h ../../include/lib.h machine/setjmp.h \
+  ../../include/synch.h ../../include/fs.h ../../include/vnode.h \
+  ../../include/vfs.h ../../include/uio.h ../../include/test.h \
+  ../../include/thread.h machine/pcb.h
+autoconf.o: ../../compile/ASST1/autoconf.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/lib.h \
+  machine/setjmp.h ../../compile/ASST1/autoconf.h
diff --git a/kern/compile/ASST1/device.o b/kern/compile/ASST1/device.o
new file mode 100644
index 0000000..01f13c0
Binary files /dev/null and b/kern/compile/ASST1/device.o differ
diff --git a/kern/compile/ASST1/devnull.o b/kern/compile/ASST1/devnull.o
new file mode 100644
index 0000000..dcee932
Binary files /dev/null and b/kern/compile/ASST1/devnull.o differ
diff --git a/kern/compile/ASST1/dumbvm.o b/kern/compile/ASST1/dumbvm.o
new file mode 100644
index 0000000..19775d4
Binary files /dev/null and b/kern/compile/ASST1/dumbvm.o differ
diff --git a/kern/compile/ASST1/emu.o b/kern/compile/ASST1/emu.o
new file mode 100644
index 0000000..7fb98ea
Binary files /dev/null and b/kern/compile/ASST1/emu.o differ
diff --git a/kern/compile/ASST1/emu_att.o b/kern/compile/ASST1/emu_att.o
new file mode 100644
index 0000000..ed544e1
Binary files /dev/null and b/kern/compile/ASST1/emu_att.o differ
diff --git a/kern/compile/ASST1/exception.o b/kern/compile/ASST1/exception.o
new file mode 100644
index 0000000..c577471
Binary files /dev/null and b/kern/compile/ASST1/exception.o differ
diff --git a/kern/compile/ASST1/files.mk b/kern/compile/ASST1/files.mk
new file mode 100644
index 0000000..8a8ce3a
--- /dev/null
+++ b/kern/compile/ASST1/files.mk
@@ -0,0 +1,461 @@
+# Automatically generated by config; do not edit
+console.o: ${S}/dev/generic/console.c
+	${COMPILE.c} ${S}/dev/generic/console.c
+SRCS+=${S}/dev/generic/console.c
+OBJS+=console.o
+
+emu.o: ${S}/dev/lamebus/emu.c
+	${COMPILE.c} ${S}/dev/lamebus/emu.c
+SRCS+=${S}/dev/lamebus/emu.c
+OBJS+=emu.o
+
+lser.o: ${S}/dev/lamebus/lser.c
+	${COMPILE.c} ${S}/dev/lamebus/lser.c
+SRCS+=${S}/dev/lamebus/lser.c
+OBJS+=lser.o
+
+lhd.o: ${S}/dev/lamebus/lhd.c
+	${COMPILE.c} ${S}/dev/lamebus/lhd.c
+SRCS+=${S}/dev/lamebus/lhd.c
+OBJS+=lhd.o
+
+pseudorand.o: ${S}/dev/generic/pseudorand.c
+	${COMPILE.c} ${S}/dev/generic/pseudorand.c
+SRCS+=${S}/dev/generic/pseudorand.c
+OBJS+=pseudorand.o
+
+random.o: ${S}/dev/generic/random.c
+	${COMPILE.c} ${S}/dev/generic/random.c
+SRCS+=${S}/dev/generic/random.c
+OBJS+=random.o
+
+ltimer.o: ${S}/dev/lamebus/ltimer.c
+	${COMPILE.c} ${S}/dev/lamebus/ltimer.c
+SRCS+=${S}/dev/lamebus/ltimer.c
+OBJS+=ltimer.o
+
+lamebus.o: ${S}/dev/lamebus/lamebus.c
+	${COMPILE.c} ${S}/dev/lamebus/lamebus.c
+SRCS+=${S}/dev/lamebus/lamebus.c
+OBJS+=lamebus.o
+
+lrandom.o: ${S}/dev/lamebus/lrandom.c
+	${COMPILE.c} ${S}/dev/lamebus/lrandom.c
+SRCS+=${S}/dev/lamebus/lrandom.c
+OBJS+=lrandom.o
+
+beep.o: ${S}/dev/generic/beep.c
+	${COMPILE.c} ${S}/dev/generic/beep.c
+SRCS+=${S}/dev/generic/beep.c
+OBJS+=beep.o
+
+ltrace.o: ${S}/dev/lamebus/ltrace.c
+	${COMPILE.c} ${S}/dev/lamebus/ltrace.c
+SRCS+=${S}/dev/lamebus/ltrace.c
+OBJS+=ltrace.o
+
+rtclock.o: ${S}/dev/generic/rtclock.c
+	${COMPILE.c} ${S}/dev/generic/rtclock.c
+SRCS+=${S}/dev/generic/rtclock.c
+OBJS+=rtclock.o
+
+ltimer_att.o: ${S}/dev/lamebus/ltimer_att.c
+	${COMPILE.c} ${S}/dev/lamebus/ltimer_att.c
+SRCS+=${S}/dev/lamebus/ltimer_att.c
+OBJS+=ltimer_att.o
+
+con_lser.o: ${S}/dev/lamebus/con_lser.c
+	${COMPILE.c} ${S}/dev/lamebus/con_lser.c
+SRCS+=${S}/dev/lamebus/con_lser.c
+OBJS+=con_lser.o
+
+lhd_att.o: ${S}/dev/lamebus/lhd_att.c
+	${COMPILE.c} ${S}/dev/lamebus/lhd_att.c
+SRCS+=${S}/dev/lamebus/lhd_att.c
+OBJS+=lhd_att.o
+
+random_lrandom.o: ${S}/dev/lamebus/random_lrandom.c
+	${COMPILE.c} ${S}/dev/lamebus/random_lrandom.c
+SRCS+=${S}/dev/lamebus/random_lrandom.c
+OBJS+=random_lrandom.o
+
+rtclock_ltimer.o: ${S}/dev/lamebus/rtclock_ltimer.c
+	${COMPILE.c} ${S}/dev/lamebus/rtclock_ltimer.c
+SRCS+=${S}/dev/lamebus/rtclock_ltimer.c
+OBJS+=rtclock_ltimer.o
+
+ltrace_att.o: ${S}/dev/lamebus/ltrace_att.c
+	${COMPILE.c} ${S}/dev/lamebus/ltrace_att.c
+SRCS+=${S}/dev/lamebus/ltrace_att.c
+OBJS+=ltrace_att.o
+
+lser_att.o: ${S}/dev/lamebus/lser_att.c
+	${COMPILE.c} ${S}/dev/lamebus/lser_att.c
+SRCS+=${S}/dev/lamebus/lser_att.c
+OBJS+=lser_att.o
+
+lrandom_att.o: ${S}/dev/lamebus/lrandom_att.c
+	${COMPILE.c} ${S}/dev/lamebus/lrandom_att.c
+SRCS+=${S}/dev/lamebus/lrandom_att.c
+OBJS+=lrandom_att.o
+
+emu_att.o: ${S}/dev/lamebus/emu_att.c
+	${COMPILE.c} ${S}/dev/lamebus/emu_att.c
+SRCS+=${S}/dev/lamebus/emu_att.c
+OBJS+=emu_att.o
+
+beep_ltimer.o: ${S}/dev/lamebus/beep_ltimer.c
+	${COMPILE.c} ${S}/dev/lamebus/beep_ltimer.c
+SRCS+=${S}/dev/lamebus/beep_ltimer.c
+OBJS+=beep_ltimer.o
+
+pseudorand_att.o: ${S}/dev/generic/pseudorand_att.c
+	${COMPILE.c} ${S}/dev/generic/pseudorand_att.c
+SRCS+=${S}/dev/generic/pseudorand_att.c
+OBJS+=pseudorand_att.o
+
+catlock.o: ${S}/asst1/catlock.c
+	${COMPILE.c} ${S}/asst1/catlock.c
+SRCS+=${S}/asst1/catlock.c
+OBJS+=catlock.o
+
+catsem.o: ${S}/asst1/catsem.c
+	${COMPILE.c} ${S}/asst1/catsem.c
+SRCS+=${S}/asst1/catsem.c
+OBJS+=catsem.o
+
+sfs_vnode.o: ${S}/fs/sfs/sfs_vnode.c
+	${COMPILE.c} ${S}/fs/sfs/sfs_vnode.c
+SRCS+=${S}/fs/sfs/sfs_vnode.c
+OBJS+=sfs_vnode.o
+
+sfs_fs.o: ${S}/fs/sfs/sfs_fs.c
+	${COMPILE.c} ${S}/fs/sfs/sfs_fs.c
+SRCS+=${S}/fs/sfs/sfs_fs.c
+OBJS+=sfs_fs.o
+
+dumbvm.o: ${S}/arch/mips/mips/dumbvm.c
+	${COMPILE.c} ${S}/arch/mips/mips/dumbvm.c
+SRCS+=${S}/arch/mips/mips/dumbvm.c
+OBJS+=dumbvm.o
+
+stoplight.o: ${S}/asst1/stoplight.c
+	${COMPILE.c} ${S}/asst1/stoplight.c
+SRCS+=${S}/asst1/stoplight.c
+OBJS+=stoplight.o
+
+sfs_io.o: ${S}/fs/sfs/sfs_io.c
+	${COMPILE.c} ${S}/fs/sfs/sfs_io.c
+SRCS+=${S}/fs/sfs/sfs_io.c
+OBJS+=sfs_io.o
+
+cache_mips1.o: ${S}/arch/mips/mips/cache_mips1.S
+	${COMPILE.S} ${S}/arch/mips/mips/cache_mips1.S
+SRCS+=${S}/arch/mips/mips/cache_mips1.S
+OBJS+=cache_mips1.o
+
+exception.o: ${S}/arch/mips/mips/exception.S
+	${COMPILE.S} ${S}/arch/mips/mips/exception.S
+SRCS+=${S}/arch/mips/mips/exception.S
+OBJS+=exception.o
+
+lamebus_mips.o: ${S}/arch/mips/mips/lamebus_mips.c
+	${COMPILE.c} ${S}/arch/mips/mips/lamebus_mips.c
+SRCS+=${S}/arch/mips/mips/lamebus_mips.c
+OBJS+=lamebus_mips.o
+
+interrupt.o: ${S}/arch/mips/mips/interrupt.c
+	${COMPILE.c} ${S}/arch/mips/mips/interrupt.c
+SRCS+=${S}/arch/mips/mips/interrupt.c
+OBJS+=interrupt.o
+
+pcb.o: ${S}/arch/mips/mips/pcb.c
+	${COMPILE.c} ${S}/arch/mips/mips/pcb.c
+SRCS+=${S}/arch/mips/mips/pcb.c
+OBJS+=pcb.o
+
+ram.o: ${S}/arch/mips/mips/ram.c
+	${COMPILE.c} ${S}/arch/mips/mips/ram.c
+SRCS+=${S}/arch/mips/mips/ram.c
+OBJS+=ram.o
+
+spl.o: ${S}/arch/mips/mips/spl.c
+	${COMPILE.c} ${S}/arch/mips/mips/spl.c
+SRCS+=${S}/arch/mips/mips/spl.c
+OBJS+=spl.o
+
+start.o: ${S}/arch/mips/mips/start.S
+	${COMPILE.S} ${S}/arch/mips/mips/start.S
+SRCS+=${S}/arch/mips/mips/start.S
+OBJS+=start.o
+
+switch.o: ${S}/arch/mips/mips/switch.S
+	${COMPILE.S} ${S}/arch/mips/mips/switch.S
+SRCS+=${S}/arch/mips/mips/switch.S
+OBJS+=switch.o
+
+syscall.o: ${S}/arch/mips/mips/syscall.c
+	${COMPILE.c} ${S}/arch/mips/mips/syscall.c
+SRCS+=${S}/arch/mips/mips/syscall.c
+OBJS+=syscall.o
+
+threadstart.o: ${S}/arch/mips/mips/threadstart.S
+	${COMPILE.S} ${S}/arch/mips/mips/threadstart.S
+SRCS+=${S}/arch/mips/mips/threadstart.S
+OBJS+=threadstart.o
+
+trap.o: ${S}/arch/mips/mips/trap.c
+	${COMPILE.c} ${S}/arch/mips/mips/trap.c
+SRCS+=${S}/arch/mips/mips/trap.c
+OBJS+=trap.o
+
+tlb_mips1.o: ${S}/arch/mips/mips/tlb_mips1.S
+	${COMPILE.S} ${S}/arch/mips/mips/tlb_mips1.S
+SRCS+=${S}/arch/mips/mips/tlb_mips1.S
+OBJS+=tlb_mips1.o
+
+mips-setjmp.o: ${S}/../lib/libc/mips-setjmp.S
+	${COMPILE.S} ${S}/../lib/libc/mips-setjmp.S
+SRCS+=${S}/../lib/libc/mips-setjmp.S
+OBJS+=mips-setjmp.o
+
+copyinout.o: ${S}/lib/copyinout.c
+	${COMPILE.c} ${S}/lib/copyinout.c
+SRCS+=${S}/lib/copyinout.c
+OBJS+=copyinout.o
+
+array.o: ${S}/lib/array.c
+	${COMPILE.c} ${S}/lib/array.c
+SRCS+=${S}/lib/array.c
+OBJS+=array.o
+
+bitmap.o: ${S}/lib/bitmap.c
+	${COMPILE.c} ${S}/lib/bitmap.c
+SRCS+=${S}/lib/bitmap.c
+OBJS+=bitmap.o
+
+queue.o: ${S}/lib/queue.c
+	${COMPILE.c} ${S}/lib/queue.c
+SRCS+=${S}/lib/queue.c
+OBJS+=queue.o
+
+kheap.o: ${S}/lib/kheap.c
+	${COMPILE.c} ${S}/lib/kheap.c
+SRCS+=${S}/lib/kheap.c
+OBJS+=kheap.o
+
+kprintf.o: ${S}/lib/kprintf.c
+	${COMPILE.c} ${S}/lib/kprintf.c
+SRCS+=${S}/lib/kprintf.c
+OBJS+=kprintf.o
+
+kgets.o: ${S}/lib/kgets.c
+	${COMPILE.c} ${S}/lib/kgets.c
+SRCS+=${S}/lib/kgets.c
+OBJS+=kgets.o
+
+misc.o: ${S}/lib/misc.c
+	${COMPILE.c} ${S}/lib/misc.c
+SRCS+=${S}/lib/misc.c
+OBJS+=misc.o
+
+ntoh.o: ${S}/lib/ntoh.c
+	${COMPILE.c} ${S}/lib/ntoh.c
+SRCS+=${S}/lib/ntoh.c
+OBJS+=ntoh.o
+
+__printf.o: ${S}/../lib/libc/__printf.c
+	${COMPILE.c} ${S}/../lib/libc/__printf.c
+SRCS+=${S}/../lib/libc/__printf.c
+OBJS+=__printf.o
+
+snprintf.o: ${S}/../lib/libc/snprintf.c
+	${COMPILE.c} ${S}/../lib/libc/snprintf.c
+SRCS+=${S}/../lib/libc/snprintf.c
+OBJS+=snprintf.o
+
+atoi.o: ${S}/../lib/libc/atoi.c
+	${COMPILE.c} ${S}/../lib/libc/atoi.c
+SRCS+=${S}/../lib/libc/atoi.c
+OBJS+=atoi.o
+
+bzero.o: ${S}/../lib/libc/bzero.c
+	${COMPILE.c} ${S}/../lib/libc/bzero.c
+SRCS+=${S}/../lib/libc/bzero.c
+OBJS+=bzero.o
+
+memcpy.o: ${S}/../lib/libc/memcpy.c
+	${COMPILE.c} ${S}/../lib/libc/memcpy.c
+SRCS+=${S}/../lib/libc/memcpy.c
+OBJS+=memcpy.o
+
+memmove.o: ${S}/../lib/libc/memmove.c
+	${COMPILE.c} ${S}/../lib/libc/memmove.c
+SRCS+=${S}/../lib/libc/memmove.c
+OBJS+=memmove.o
+
+strcat.o: ${S}/../lib/libc/strcat.c
+	${COMPILE.c} ${S}/../lib/libc/strcat.c
+SRCS+=${S}/../lib/libc/strcat.c
+OBJS+=strcat.o
+
+strchr.o: ${S}/../lib/libc/strchr.c
+	${COMPILE.c} ${S}/../lib/libc/strchr.c
+SRCS+=${S}/../lib/libc/strchr.c
+OBJS+=strchr.o
+
+strcmp.o: ${S}/../lib/libc/strcmp.c
+	${COMPILE.c} ${S}/../lib/libc/strcmp.c
+SRCS+=${S}/../lib/libc/strcmp.c
+OBJS+=strcmp.o
+
+strcpy.o: ${S}/../lib/libc/strcpy.c
+	${COMPILE.c} ${S}/../lib/libc/strcpy.c
+SRCS+=${S}/../lib/libc/strcpy.c
+OBJS+=strcpy.o
+
+strlen.o: ${S}/../lib/libc/strlen.c
+	${COMPILE.c} ${S}/../lib/libc/strlen.c
+SRCS+=${S}/../lib/libc/strlen.c
+OBJS+=strlen.o
+
+strrchr.o: ${S}/../lib/libc/strrchr.c
+	${COMPILE.c} ${S}/../lib/libc/strrchr.c
+SRCS+=${S}/../lib/libc/strrchr.c
+OBJS+=strrchr.o
+
+strtok_r.o: ${S}/../lib/libc/strtok_r.c
+	${COMPILE.c} ${S}/../lib/libc/strtok_r.c
+SRCS+=${S}/../lib/libc/strtok_r.c
+OBJS+=strtok_r.o
+
+init.o: ${S}/dev/init.c
+	${COMPILE.c} ${S}/dev/init.c
+SRCS+=${S}/dev/init.c
+OBJS+=init.o
+
+device.o: ${S}/fs/vfs/device.c
+	${COMPILE.c} ${S}/fs/vfs/device.c
+SRCS+=${S}/fs/vfs/device.c
+OBJS+=device.o
+
+vfscwd.o: ${S}/fs/vfs/vfscwd.c
+	${COMPILE.c} ${S}/fs/vfs/vfscwd.c
+SRCS+=${S}/fs/vfs/vfscwd.c
+OBJS+=vfscwd.o
+
+vfslist.o: ${S}/fs/vfs/vfslist.c
+	${COMPILE.c} ${S}/fs/vfs/vfslist.c
+SRCS+=${S}/fs/vfs/vfslist.c
+OBJS+=vfslist.o
+
+vfslookup.o: ${S}/fs/vfs/vfslookup.c
+	${COMPILE.c} ${S}/fs/vfs/vfslookup.c
+SRCS+=${S}/fs/vfs/vfslookup.c
+OBJS+=vfslookup.o
+
+vfspath.o: ${S}/fs/vfs/vfspath.c
+	${COMPILE.c} ${S}/fs/vfs/vfspath.c
+SRCS+=${S}/fs/vfs/vfspath.c
+OBJS+=vfspath.o
+
+vnode.o: ${S}/fs/vfs/vnode.c
+	${COMPILE.c} ${S}/fs/vfs/vnode.c
+SRCS+=${S}/fs/vfs/vnode.c
+OBJS+=vnode.o
+
+devnull.o: ${S}/fs/vfs/devnull.c
+	${COMPILE.c} ${S}/fs/vfs/devnull.c
+SRCS+=${S}/fs/vfs/devnull.c
+OBJS+=devnull.o
+
+hardclock.o: ${S}/thread/hardclock.c
+	${COMPILE.c} ${S}/thread/hardclock.c
+SRCS+=${S}/thread/hardclock.c
+OBJS+=hardclock.o
+
+synch.o: ${S}/thread/synch.c
+	${COMPILE.c} ${S}/thread/synch.c
+SRCS+=${S}/thread/synch.c
+OBJS+=synch.o
+
+scheduler.o: ${S}/thread/scheduler.c
+	${COMPILE.c} ${S}/thread/scheduler.c
+SRCS+=${S}/thread/scheduler.c
+OBJS+=scheduler.o
+
+thread.o: ${S}/thread/thread.c
+	${COMPILE.c} ${S}/thread/thread.c
+SRCS+=${S}/thread/thread.c
+OBJS+=thread.o
+
+main.o: ${S}/main/main.c
+	${COMPILE.c} ${S}/main/main.c
+SRCS+=${S}/main/main.c
+OBJS+=main.o
+
+menu.o: ${S}/main/menu.c
+	${COMPILE.c} ${S}/main/menu.c
+SRCS+=${S}/main/menu.c
+OBJS+=menu.o
+
+loadelf.o: ${S}/userprog/loadelf.c
+	${COMPILE.c} ${S}/userprog/loadelf.c
+SRCS+=${S}/userprog/loadelf.c
+OBJS+=loadelf.o
+
+runprogram.o: ${S}/userprog/runprogram.c
+	${COMPILE.c} ${S}/userprog/runprogram.c
+SRCS+=${S}/userprog/runprogram.c
+OBJS+=runprogram.o
+
+uio.o: ${S}/userprog/uio.c
+	${COMPILE.c} ${S}/userprog/uio.c
+SRCS+=${S}/userprog/uio.c
+OBJS+=uio.o
+
+arraytest.o: ${S}/test/arraytest.c
+	${COMPILE.c} ${S}/test/arraytest.c
+SRCS+=${S}/test/arraytest.c
+OBJS+=arraytest.o
+
+bitmaptest.o: ${S}/test/bitmaptest.c
+	${COMPILE.c} ${S}/test/bitmaptest.c
+SRCS+=${S}/test/bitmaptest.c
+OBJS+=bitmaptest.o
+
+queuetest.o: ${S}/test/queuetest.c
+	${COMPILE.c} ${S}/test/queuetest.c
+SRCS+=${S}/test/queuetest.c
+OBJS+=queuetest.o
+
+threadtest.o: ${S}/test/threadtest.c
+	${COMPILE.c} ${S}/test/threadtest.c
+SRCS+=${S}/test/threadtest.c
+OBJS+=threadtest.o
+
+tt3.o: ${S}/test/tt3.c
+	${COMPILE.c} ${S}/test/tt3.c
+SRCS+=${S}/test/tt3.c
+OBJS+=tt3.o
+
+synchtest.o: ${S}/test/synchtest.c
+	${COMPILE.c} ${S}/test/synchtest.c
+SRCS+=${S}/test/synchtest.c
+OBJS+=synchtest.o
+
+malloctest.o: ${S}/test/malloctest.c
+	${COMPILE.c} ${S}/test/malloctest.c
+SRCS+=${S}/test/malloctest.c
+OBJS+=malloctest.o
+
+fstest.o: ${S}/test/fstest.c
+	${COMPILE.c} ${S}/test/fstest.c
+SRCS+=${S}/test/fstest.c
+OBJS+=fstest.o
+
+autoconf.o: ${S}/compile/ASST1/autoconf.c
+	${COMPILE.c} ${S}/compile/ASST1/autoconf.c
+SRCS+=${S}/compile/ASST1/autoconf.c
+OBJS+=autoconf.o
+
diff --git a/kern/compile/ASST1/fstest.o b/kern/compile/ASST1/fstest.o
new file mode 100644
index 0000000..51ba1d4
Binary files /dev/null and b/kern/compile/ASST1/fstest.o differ
diff --git a/kern/compile/ASST1/hardclock.o b/kern/compile/ASST1/hardclock.o
new file mode 100644
index 0000000..957fe5f
Binary files /dev/null and b/kern/compile/ASST1/hardclock.o differ
diff --git a/kern/compile/ASST1/init.o b/kern/compile/ASST1/init.o
new file mode 100644
index 0000000..9b6ef38
Binary files /dev/null and b/kern/compile/ASST1/init.o differ
diff --git a/kern/compile/ASST1/interrupt.o b/kern/compile/ASST1/interrupt.o
new file mode 100644
index 0000000..647f93e
Binary files /dev/null and b/kern/compile/ASST1/interrupt.o differ
diff --git a/kern/compile/ASST1/kernel b/kern/compile/ASST1/kernel
new file mode 100755
index 0000000..dcac4e1
Binary files /dev/null and b/kern/compile/ASST1/kernel differ
diff --git a/kern/compile/ASST1/kgets.o b/kern/compile/ASST1/kgets.o
new file mode 100644
index 0000000..19c05dc
Binary files /dev/null and b/kern/compile/ASST1/kgets.o differ
diff --git a/kern/compile/ASST1/kheap.o b/kern/compile/ASST1/kheap.o
new file mode 100644
index 0000000..039157b
Binary files /dev/null and b/kern/compile/ASST1/kheap.o differ
diff --git a/kern/compile/ASST1/kprintf.o b/kern/compile/ASST1/kprintf.o
new file mode 100644
index 0000000..0e647e6
Binary files /dev/null and b/kern/compile/ASST1/kprintf.o differ
diff --git a/kern/compile/ASST1/lamebus.o b/kern/compile/ASST1/lamebus.o
new file mode 100644
index 0000000..73e247d
Binary files /dev/null and b/kern/compile/ASST1/lamebus.o differ
diff --git a/kern/compile/ASST1/lamebus_mips.o b/kern/compile/ASST1/lamebus_mips.o
new file mode 100644
index 0000000..862eb6b
Binary files /dev/null and b/kern/compile/ASST1/lamebus_mips.o differ
diff --git a/kern/compile/ASST1/lhd.o b/kern/compile/ASST1/lhd.o
new file mode 100644
index 0000000..9dff8e5
Binary files /dev/null and b/kern/compile/ASST1/lhd.o differ
diff --git a/kern/compile/ASST1/lhd_att.o b/kern/compile/ASST1/lhd_att.o
new file mode 100644
index 0000000..f7fd7f8
Binary files /dev/null and b/kern/compile/ASST1/lhd_att.o differ
diff --git a/kern/compile/ASST1/loadelf.o b/kern/compile/ASST1/loadelf.o
new file mode 100644
index 0000000..daa5261
Binary files /dev/null and b/kern/compile/ASST1/loadelf.o differ
diff --git a/kern/compile/ASST1/lrandom.o b/kern/compile/ASST1/lrandom.o
new file mode 100644
index 0000000..6317ed4
Binary files /dev/null and b/kern/compile/ASST1/lrandom.o differ
diff --git a/kern/compile/ASST1/lrandom_att.o b/kern/compile/ASST1/lrandom_att.o
new file mode 100644
index 0000000..1787004
Binary files /dev/null and b/kern/compile/ASST1/lrandom_att.o differ
diff --git a/kern/compile/ASST1/lser.o b/kern/compile/ASST1/lser.o
new file mode 100644
index 0000000..d152b27
Binary files /dev/null and b/kern/compile/ASST1/lser.o differ
diff --git a/kern/compile/ASST1/lser_att.o b/kern/compile/ASST1/lser_att.o
new file mode 100644
index 0000000..0fd32df
Binary files /dev/null and b/kern/compile/ASST1/lser_att.o differ
diff --git a/kern/compile/ASST1/ltimer.o b/kern/compile/ASST1/ltimer.o
new file mode 100644
index 0000000..6da8116
Binary files /dev/null and b/kern/compile/ASST1/ltimer.o differ
diff --git a/kern/compile/ASST1/ltimer_att.o b/kern/compile/ASST1/ltimer_att.o
new file mode 100644
index 0000000..06128c4
Binary files /dev/null and b/kern/compile/ASST1/ltimer_att.o differ
diff --git a/kern/compile/ASST1/ltrace.o b/kern/compile/ASST1/ltrace.o
new file mode 100644
index 0000000..80a9dd3
Binary files /dev/null and b/kern/compile/ASST1/ltrace.o differ
diff --git a/kern/compile/ASST1/ltrace_att.o b/kern/compile/ASST1/ltrace_att.o
new file mode 100644
index 0000000..ef7e7ee
Binary files /dev/null and b/kern/compile/ASST1/ltrace_att.o differ
diff --git a/kern/compile/ASST1/machine b/kern/compile/ASST1/machine
new file mode 120000
index 0000000..c12f325
--- /dev/null
+++ b/kern/compile/ASST1/machine
@@ -0,0 +1 @@
+../../arch/mips/include
\ No newline at end of file
diff --git a/kern/compile/ASST1/main.o b/kern/compile/ASST1/main.o
new file mode 100644
index 0000000..10b088f
Binary files /dev/null and b/kern/compile/ASST1/main.o differ
diff --git a/kern/compile/ASST1/malloctest.o b/kern/compile/ASST1/malloctest.o
new file mode 100644
index 0000000..accb919
Binary files /dev/null and b/kern/compile/ASST1/malloctest.o differ
diff --git a/kern/compile/ASST1/memcpy.o b/kern/compile/ASST1/memcpy.o
new file mode 100644
index 0000000..e7ce104
Binary files /dev/null and b/kern/compile/ASST1/memcpy.o differ
diff --git a/kern/compile/ASST1/memmove.o b/kern/compile/ASST1/memmove.o
new file mode 100644
index 0000000..ed1b58f
Binary files /dev/null and b/kern/compile/ASST1/memmove.o differ
diff --git a/kern/compile/ASST1/menu.o b/kern/compile/ASST1/menu.o
new file mode 100644
index 0000000..7421084
Binary files /dev/null and b/kern/compile/ASST1/menu.o differ
diff --git a/kern/compile/ASST1/mips-setjmp.o b/kern/compile/ASST1/mips-setjmp.o
new file mode 100644
index 0000000..8ddb255
Binary files /dev/null and b/kern/compile/ASST1/mips-setjmp.o differ
diff --git a/kern/compile/ASST1/misc.o b/kern/compile/ASST1/misc.o
new file mode 100644
index 0000000..32e66f4
Binary files /dev/null and b/kern/compile/ASST1/misc.o differ
diff --git a/kern/compile/ASST1/ntoh.o b/kern/compile/ASST1/ntoh.o
new file mode 100644
index 0000000..7e93667
Binary files /dev/null and b/kern/compile/ASST1/ntoh.o differ
diff --git a/kern/compile/ASST1/opt-dumbvm.h b/kern/compile/ASST1/opt-dumbvm.h
new file mode 100644
index 0000000..7db9b01
--- /dev/null
+++ b/kern/compile/ASST1/opt-dumbvm.h
@@ -0,0 +1,5 @@
+/* Automatically generated; do not edit */
+#ifndef _OPT_DUMBVM_H_
+#define _OPT_DUMBVM_H_
+#define OPT_DUMBVM 1
+#endif /* _OPT_DUMBVM_H_ */
diff --git a/kern/compile/ASST1/opt-net.h b/kern/compile/ASST1/opt-net.h
new file mode 100644
index 0000000..0340a83
--- /dev/null
+++ b/kern/compile/ASST1/opt-net.h
@@ -0,0 +1,5 @@
+/* Automatically generated; do not edit */
+#ifndef _OPT_NET_H_
+#define _OPT_NET_H_
+#define OPT_NET 0
+#endif /* _OPT_NET_H_ */
diff --git a/kern/compile/ASST1/opt-netfs.h b/kern/compile/ASST1/opt-netfs.h
new file mode 100644
index 0000000..cd21c56
--- /dev/null
+++ b/kern/compile/ASST1/opt-netfs.h
@@ -0,0 +1,5 @@
+/* Automatically generated; do not edit */
+#ifndef _OPT_NETFS_H_
+#define _OPT_NETFS_H_
+#define OPT_NETFS 0
+#endif /* _OPT_NETFS_H_ */
diff --git a/kern/compile/ASST1/opt-sfs.h b/kern/compile/ASST1/opt-sfs.h
new file mode 100644
index 0000000..94095ad
--- /dev/null
+++ b/kern/compile/ASST1/opt-sfs.h
@@ -0,0 +1,5 @@
+/* Automatically generated; do not edit */
+#ifndef _OPT_SFS_H_
+#define _OPT_SFS_H_
+#define OPT_SFS 1
+#endif /* _OPT_SFS_H_ */
diff --git a/kern/compile/ASST1/opt-synchprobs.h b/kern/compile/ASST1/opt-synchprobs.h
new file mode 100644
index 0000000..57b9186
--- /dev/null
+++ b/kern/compile/ASST1/opt-synchprobs.h
@@ -0,0 +1,5 @@
+/* Automatically generated; do not edit */
+#ifndef _OPT_SYNCHPROBS_H_
+#define _OPT_SYNCHPROBS_H_
+#define OPT_SYNCHPROBS 1
+#endif /* _OPT_SYNCHPROBS_H_ */
diff --git a/kern/compile/ASST1/pcb.o b/kern/compile/ASST1/pcb.o
new file mode 100644
index 0000000..33d3a71
Binary files /dev/null and b/kern/compile/ASST1/pcb.o differ
diff --git a/kern/compile/ASST1/pseudorand.o b/kern/compile/ASST1/pseudorand.o
new file mode 100644
index 0000000..86725c8
Binary files /dev/null and b/kern/compile/ASST1/pseudorand.o differ
diff --git a/kern/compile/ASST1/pseudorand_att.o b/kern/compile/ASST1/pseudorand_att.o
new file mode 100644
index 0000000..57bb365
Binary files /dev/null and b/kern/compile/ASST1/pseudorand_att.o differ
diff --git a/kern/compile/ASST1/queue.o b/kern/compile/ASST1/queue.o
new file mode 100644
index 0000000..d38e6d7
Binary files /dev/null and b/kern/compile/ASST1/queue.o differ
diff --git a/kern/compile/ASST1/queuetest.o b/kern/compile/ASST1/queuetest.o
new file mode 100644
index 0000000..87eb076
Binary files /dev/null and b/kern/compile/ASST1/queuetest.o differ
diff --git a/kern/compile/ASST1/ram.o b/kern/compile/ASST1/ram.o
new file mode 100644
index 0000000..036501b
Binary files /dev/null and b/kern/compile/ASST1/ram.o differ
diff --git a/kern/compile/ASST1/random.o b/kern/compile/ASST1/random.o
new file mode 100644
index 0000000..ecdd758
Binary files /dev/null and b/kern/compile/ASST1/random.o differ
diff --git a/kern/compile/ASST1/random_lrandom.o b/kern/compile/ASST1/random_lrandom.o
new file mode 100644
index 0000000..74cd8b5
Binary files /dev/null and b/kern/compile/ASST1/random_lrandom.o differ
diff --git a/kern/compile/ASST1/rtclock.o b/kern/compile/ASST1/rtclock.o
new file mode 100644
index 0000000..6d1bbe2
Binary files /dev/null and b/kern/compile/ASST1/rtclock.o differ
diff --git a/kern/compile/ASST1/rtclock_ltimer.o b/kern/compile/ASST1/rtclock_ltimer.o
new file mode 100644
index 0000000..cfe1ca8
Binary files /dev/null and b/kern/compile/ASST1/rtclock_ltimer.o differ
diff --git a/kern/compile/ASST1/runprogram.o b/kern/compile/ASST1/runprogram.o
new file mode 100644
index 0000000..69945e7
Binary files /dev/null and b/kern/compile/ASST1/runprogram.o differ
diff --git a/kern/compile/ASST1/scheduler.o b/kern/compile/ASST1/scheduler.o
new file mode 100644
index 0000000..dec2f90
Binary files /dev/null and b/kern/compile/ASST1/scheduler.o differ
diff --git a/kern/compile/ASST1/sfs_fs.o b/kern/compile/ASST1/sfs_fs.o
new file mode 100644
index 0000000..538f18b
Binary files /dev/null and b/kern/compile/ASST1/sfs_fs.o differ
diff --git a/kern/compile/ASST1/sfs_io.o b/kern/compile/ASST1/sfs_io.o
new file mode 100644
index 0000000..7bcbcd9
Binary files /dev/null and b/kern/compile/ASST1/sfs_io.o differ
diff --git a/kern/compile/ASST1/sfs_vnode.o b/kern/compile/ASST1/sfs_vnode.o
new file mode 100644
index 0000000..7bd6218
Binary files /dev/null and b/kern/compile/ASST1/sfs_vnode.o differ
diff --git a/kern/compile/ASST1/snprintf.o b/kern/compile/ASST1/snprintf.o
new file mode 100644
index 0000000..f584b4a
Binary files /dev/null and b/kern/compile/ASST1/snprintf.o differ
diff --git a/kern/compile/ASST1/spl.o b/kern/compile/ASST1/spl.o
new file mode 100644
index 0000000..5deb412
Binary files /dev/null and b/kern/compile/ASST1/spl.o differ
diff --git a/kern/compile/ASST1/start.o b/kern/compile/ASST1/start.o
new file mode 100644
index 0000000..a5f5fa7
Binary files /dev/null and b/kern/compile/ASST1/start.o differ
diff --git a/kern/compile/ASST1/stoplight.o b/kern/compile/ASST1/stoplight.o
new file mode 100644
index 0000000..6c18679
Binary files /dev/null and b/kern/compile/ASST1/stoplight.o differ
diff --git a/kern/compile/ASST1/strcat.o b/kern/compile/ASST1/strcat.o
new file mode 100644
index 0000000..df5b761
Binary files /dev/null and b/kern/compile/ASST1/strcat.o differ
diff --git a/kern/compile/ASST1/strchr.o b/kern/compile/ASST1/strchr.o
new file mode 100644
index 0000000..4997f92
Binary files /dev/null and b/kern/compile/ASST1/strchr.o differ
diff --git a/kern/compile/ASST1/strcmp.o b/kern/compile/ASST1/strcmp.o
new file mode 100644
index 0000000..4b5dded
Binary files /dev/null and b/kern/compile/ASST1/strcmp.o differ
diff --git a/kern/compile/ASST1/strcpy.o b/kern/compile/ASST1/strcpy.o
new file mode 100644
index 0000000..dde3c1f
Binary files /dev/null and b/kern/compile/ASST1/strcpy.o differ
diff --git a/kern/compile/ASST1/strlen.o b/kern/compile/ASST1/strlen.o
new file mode 100644
index 0000000..5da3850
Binary files /dev/null and b/kern/compile/ASST1/strlen.o differ
diff --git a/kern/compile/ASST1/strrchr.o b/kern/compile/ASST1/strrchr.o
new file mode 100644
index 0000000..9eda23b
Binary files /dev/null and b/kern/compile/ASST1/strrchr.o differ
diff --git a/kern/compile/ASST1/strtok_r.o b/kern/compile/ASST1/strtok_r.o
new file mode 100644
index 0000000..aff0cd9
Binary files /dev/null and b/kern/compile/ASST1/strtok_r.o differ
diff --git a/kern/compile/ASST1/switch.o b/kern/compile/ASST1/switch.o
new file mode 100644
index 0000000..d50fbbc
Binary files /dev/null and b/kern/compile/ASST1/switch.o differ
diff --git a/kern/compile/ASST1/synch.o b/kern/compile/ASST1/synch.o
new file mode 100644
index 0000000..608b12d
Binary files /dev/null and b/kern/compile/ASST1/synch.o differ
diff --git a/kern/compile/ASST1/synchtest.o b/kern/compile/ASST1/synchtest.o
new file mode 100644
index 0000000..e489334
Binary files /dev/null and b/kern/compile/ASST1/synchtest.o differ
diff --git a/kern/compile/ASST1/syscall.o b/kern/compile/ASST1/syscall.o
new file mode 100644
index 0000000..1a93662
Binary files /dev/null and b/kern/compile/ASST1/syscall.o differ
diff --git a/kern/compile/ASST1/thread.o b/kern/compile/ASST1/thread.o
new file mode 100644
index 0000000..793bcf4
Binary files /dev/null and b/kern/compile/ASST1/thread.o differ
diff --git a/kern/compile/ASST1/threadstart.o b/kern/compile/ASST1/threadstart.o
new file mode 100644
index 0000000..5f9e6c2
Binary files /dev/null and b/kern/compile/ASST1/threadstart.o differ
diff --git a/kern/compile/ASST1/threadtest.o b/kern/compile/ASST1/threadtest.o
new file mode 100644
index 0000000..9ef8a89
Binary files /dev/null and b/kern/compile/ASST1/threadtest.o differ
diff --git a/kern/compile/ASST1/tlb_mips1.o b/kern/compile/ASST1/tlb_mips1.o
new file mode 100644
index 0000000..2902d8f
Binary files /dev/null and b/kern/compile/ASST1/tlb_mips1.o differ
diff --git a/kern/compile/ASST1/trap.o b/kern/compile/ASST1/trap.o
new file mode 100644
index 0000000..265b3eb
Binary files /dev/null and b/kern/compile/ASST1/trap.o differ
diff --git a/kern/compile/ASST1/tt3.o b/kern/compile/ASST1/tt3.o
new file mode 100644
index 0000000..9025d1e
Binary files /dev/null and b/kern/compile/ASST1/tt3.o differ
diff --git a/kern/compile/ASST1/uio.o b/kern/compile/ASST1/uio.o
new file mode 100644
index 0000000..acf8f0a
Binary files /dev/null and b/kern/compile/ASST1/uio.o differ
diff --git a/kern/compile/ASST1/vers.c b/kern/compile/ASST1/vers.c
new file mode 100644
index 0000000..689e239
--- /dev/null
+++ b/kern/compile/ASST1/vers.c
@@ -0,0 +1,3 @@
+/* This file is automatically generated. Edits will be lost.*/
+const int buildversion = 2;
+const char buildconfig[] = "ASST1";
diff --git a/kern/compile/ASST1/vers.o b/kern/compile/ASST1/vers.o
new file mode 100644
index 0000000..6df2344
Binary files /dev/null and b/kern/compile/ASST1/vers.o differ
diff --git a/kern/compile/ASST1/version b/kern/compile/ASST1/version
new file mode 100644
index 0000000..0cfbf08
--- /dev/null
+++ b/kern/compile/ASST1/version
@@ -0,0 +1 @@
+2
diff --git a/kern/compile/ASST1/vfscwd.o b/kern/compile/ASST1/vfscwd.o
new file mode 100644
index 0000000..620b359
Binary files /dev/null and b/kern/compile/ASST1/vfscwd.o differ
diff --git a/kern/compile/ASST1/vfslist.o b/kern/compile/ASST1/vfslist.o
new file mode 100644
index 0000000..183bc14
Binary files /dev/null and b/kern/compile/ASST1/vfslist.o differ
diff --git a/kern/compile/ASST1/vfslookup.o b/kern/compile/ASST1/vfslookup.o
new file mode 100644
index 0000000..1f73648
Binary files /dev/null and b/kern/compile/ASST1/vfslookup.o differ
diff --git a/kern/compile/ASST1/vfspath.o b/kern/compile/ASST1/vfspath.o
new file mode 100644
index 0000000..59bcf76
Binary files /dev/null and b/kern/compile/ASST1/vfspath.o differ
diff --git a/kern/compile/ASST1/vnode.o b/kern/compile/ASST1/vnode.o
new file mode 100644
index 0000000..87e2329
Binary files /dev/null and b/kern/compile/ASST1/vnode.o differ
diff --git a/kern/include/synch.h b/kern/include/synch.h
index 3583e78..626e56a 100644
--- a/kern/include/synch.h
+++ b/kern/include/synch.h
@@ -51,7 +51,7 @@ void              sem_destroy(struct semaphore *);
 struct lock {
 	char *name;
 	// add what you need here
-	// (don't forget to mark things volatile as needed)
+	volatile struct thread *holder;
 };
 
 struct lock *lock_create(const char *name);
@@ -89,8 +89,7 @@ void         lock_destroy(struct lock *);
 
 struct cv {
 	char *name;
-	// add what you need here
-	// (don't forget to mark things volatile as needed)
+	// add what you need here 
 };
 
 struct cv *cv_create(const char *name);
diff --git a/kern/thread/synch.c b/kern/thread/synch.c
index cdc47a3..610733c 100644
--- a/kern/thread/synch.c
+++ b/kern/thread/synch.c
@@ -34,7 +34,7 @@ sem_create(const char *namearg, int initial_count)
 	return sem;
 }
 
-void
+void 
 sem_destroy(struct semaphore *sem)
 {
 	int spl;
@@ -111,8 +111,8 @@ lock_create(const char *name)
 		kfree(lock);
 		return NULL;
 	}
-	
-	// add stuff here as needed
+
+	lock->holder = NULL;
 	
 	return lock;
 }
@@ -120,38 +120,63 @@ lock_create(const char *name)
 void
 lock_destroy(struct lock *lock)
 {
-	assert(lock != NULL);
-
-	// add stuff here as needed
+	assert(lock != NULL); 
 	
 	kfree(lock->name);
-	kfree(lock);
+	kfree(lock);	
+
 }
 
 void
 lock_acquire(struct lock *lock)
 {
-	// Write this
+	assert(lock != NULL);
+	int spl = splhigh();
+	
+	if (lock_do_i_hold(lock)){
+		panic("lock %s at %p: Deadlock.\n", lock->name, lock);
+	}
+	
+
+	while (lock->holder != NULL){
+		thread_sleep(lock);
+	}
+
+	lock->holder = curthread;
+		splx(spl);
 
-	(void)lock;  // suppress warning until code gets written
 }
 
 void
 lock_release(struct lock *lock)
 {
-	// Write this
+	assert(lock != NULL);
+	int same, spl;
+	spl = splhigh();
+	
+	lock->holder = NULL;
+	thread_wakeup(lock);
+	
+	splx(spl);
 
-	(void)lock;  // suppress warning until code gets written
 }
 
 int
 lock_do_i_hold(struct lock *lock)
 {
-	// Write this
-
-	(void)lock;  // suppress warning until code gets written
-
-	return 1;    // dummy until code gets written
+	 assert(lock != NULL);
+   	 int same, spl;
+   	 spl = splhigh();
+    
+   	 if (lock->holder == curthread) {
+        	same = 1;
+   	 } else {
+       	 	same = 0;
+   	 }
+
+    	 splx(spl);
+
+   	 return same;
 }
 
 ////////////////////////////////////////////////////////////
@@ -175,8 +200,6 @@ cv_create(const char *name)
 		return NULL;
 	}
 	
-	// add stuff here as needed
-	
 	return cv;
 }
 
@@ -185,32 +208,48 @@ cv_destroy(struct cv *cv)
 {
 	assert(cv != NULL);
 
-	// add stuff here as needed
-	
 	kfree(cv->name);
 	kfree(cv);
+
 }
 
 void
 cv_wait(struct cv *cv, struct lock *lock)
 {
-	// Write this
-	(void)cv;    // suppress warning until code gets written
-	(void)lock;  // suppress warning until code gets written
+	 assert(cv != NULL);
+    	 assert(lock != NULL);
+      	 int spl = splhigh();
+   
+	 lock_release(lock);
+   	 thread_sleep(cv);
+   	 lock_acquire(lock);
+    
+   	 splx(spl);
+
 }
 
 void
 cv_signal(struct cv *cv, struct lock *lock)
 {
-	// Write this
-	(void)cv;    // suppress warning until code gets written
-	(void)lock;  // suppress warning until code gets written
+ 	assert(cv != NULL);
+        assert(lock != NULL);
+        int spl = splhigh();
+	
+ 	if (!lock_do_i_hold(lock)) {
+        	panic("cv_signal error: cv %s at %p, lock %s at %p.\n", cv->name, cv, lock->name, lock);
+    	}
+	thread_wakeup(cv);
+	splx(spl);
 }
 
 void
 cv_broadcast(struct cv *cv, struct lock *lock)
 {
-	// Write this
-	(void)cv;    // suppress warning until code gets written
-	(void)lock;  // suppress warning until code gets written
+	assert(cv != NULL);
+        assert(lock != NULL);
+	int spl=splhigh();
+
+	lock_release(lock);
+	thread_wakeup(cv);
+        splx(spl);
 }
